@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix sdo: <https://schema.org/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@base <http://www.opengis.net/def/geosparql/validator/rule/> .


<http://www.opengis.net/def/geosparql/validator>
	a owl:Ontology ;
  	dcterms:title "GeoSPARQL RDF Shapes Validator"@en ;
	dcterms:description """This is a [Shapes Constraint Language (SHACL)](https://www.w3.org/TR/shacl/) file that specifies rules for RDF data. It can be used to test the conformance of data to the GeoSPARQL standard.
	
As of GeoSPARQL 1.1, this validator is not normative, only informative, however this is likely to be the basis of future, normative, validators."""@en ;
	dcterms:publisher [
		a sdo:Organization ;
		sdo:name "Open Geospatial Consortium" ;
		sdo:url "https://www.ogc.org"^^xsd:anyURI ;
	] ;
	dcterms:creator "OGC GeoSPARQL Standards Working Group" ;
	dcterms:created "2021-06-13"^^xsd:date ;
	dcterms:modified "2021-06-22"^^xsd:date ;
	owl:versionInfo "OGC GeoSPARQL 1.1" ;
	owl:versionIRI <http://www.opengis.net/def/geosparql/validator/1.1> ;  # same as Spec version for now
.

<hasGeometry-hasSerialization>
    a sh:NodeShape ;
	sh:targetObjectsOf geo:hasGeometry ;
	sh:property [
    	    sh:path [ 
	        sh:alternativePath (
	            geo:hasSerialization
		    geo:asGML
		    geo:asWKT
		    geo:asGeoJSON
		    geo:asKML
		    geo:asDGGS
	        ) 
	    ] ;
            sh:minCount 1 ;
	    sh:maxCount 1 ;
	] ;
	sh:message "Each node with an incoming geo:hasGeometry should have at least one outgoing relation that is either geo:hasSerialization or a specialisation of it."@en ;
	skos:example 
		"""
		# A valid example: incoming into the Geometry Blank Node is geo:hasGeometry, outgoing is geo:asWKT
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			a geo:Feature ;
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)" ;
			]
		.
		"""^^xsd:string ,
		"""
		# An invalid example: incoming into the Geometry Blank Node is geo:hasGeometry, there is no outgoing subproperty of geo:hasSerialization
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			a geo:Feature ;
			geo:hasGeometry [
				a geo:Geometry ;
			] ;
		.
		"""^^xsd:string ;
.

# Each node with an outgoing relation that is either geo:hasSerialization or a specialisation of it, should have exactly one incoming geo:hasGeometry relation
<hasSerialization-hasGeometry>
    a sh:NodeShape ;
	sh:targetSubjectsOf     	
		geo:hasSerialization ,
		geo:asGML ,
		geo:asWKT ,
		geo:asGeoJSON ,
		geo:asKML ,
		geo:asDGGS ;
	sh:property [
		sh:path [ sh:inversePath geo:hasGeometry ] ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
	] ;
	sh:message "Each node with an incoming geo:hasGeometry should have exactly one outgoing relation that is either geo:hasSerialization or a specialisation of it."@en ;
	skos:example 
		"""
		# A valid example: outgoing from the Geometry Blank Node is geo:asWKT, incoming is geo:hasGeometry
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			a geo:Feature ;
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)" ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: outgoing from the Geometry Blank Node is geo:asGeoJSON, there is no incoming geo:hasGeometry
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x> a geo:Feature .

		[] a geo:Geometry ;
			geo:asGeoJSON "{ \"type\": \"Point\", \"coordinates\": [149.06017784, -35.23612321] }"^^geo:geoJSONLiteral ;
		.
		"""^^xsd:string ;
.


<hasGeometry-hasSerialization>
    a sh:NodeShape ;
	sh:targetObjectsOf geo:hasGeometry ;
	sh:property [
		sh:path geo:hasGeometry ;
        sh:maxCount 0 ;
	] ;
	sh:message "A node that has an outgoing geo:hasGeometry property cannot have an incoming geo:hasGeometry property at the same time (a reasoner can detect the inconsistency (a geo:Feature cannot be a geo:Geometry at the same time), but it cannot be used to pinpoint the problem as SHACL can)"@en ;
	skos:example 
		"""
		# A valid example: the Resource instance <resource-x> has an outgoing geo:hasGeometry property and no incoming geo:hasGeometry
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-x>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)" ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: the Resource instance <resource-x> has both an outgoing and an incoming geo:hasGeometry property
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-x>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)" ;
			] ;
		.

		<resource-y>
			geo:hasGeometry <resource-x> ;
		.		
		"""^^xsd:string ;
.

# Checks on the target of datatype properties, i.e. are they effectively RDF literals? (a reasoner can only detect inconsistencies)

# Checks on the datatype of datatype properties, e.g. a geo:asGeoJSON property needs to point to a literal with datatype geo:geoJSONLiteral (a reasoner cannot infer a datatype via rdfs:range, only detect inconsistencies)

