@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix geo: <http://www.opengis.net/ont/geosparql#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix sdo: <https://schema.org/> .
@prefix skos: <http://www.w3.org/2004/02/skos/core#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@base <http://www.opengis.net/def/geosparql/validator/rule/> .


<http://www.opengis.net/def/geosparql/validator>
	a owl:Ontology ;
  	dcterms:title "GeoSPARQL RDF Shapes Validator"@en ;
	dcterms:description """This is a [Shapes Constraint Language (SHACL)](https://www.w3.org/TR/shacl/) file that specifies rules for RDF data. It can be used to test the conformance of data to the GeoSPARQL standard.
	
As of GeoSPARQL 1.1, this validator is not normative, only informative, however this is likely to be the basis of future, normative, validators."""@en ;
	dcterms:publisher [
		a sdo:Organization ;
		sdo:name "Open Geospatial Consortium" ;
		sdo:url "https://www.ogc.org"^^xsd:anyURI ;
	] ;
	dcterms:creator "OGC GeoSPARQL Standards Working Group" ;
	dcterms:created "2021-06-13"^^xsd:date ;
	dcterms:modified "2021-06-22"^^xsd:date ;
	owl:versionInfo "OGC GeoSPARQL 1.1" ;
	owl:versionIRI <http://www.opengis.net/def/geosparql/validator/1.1> ;  # same as Spec version for now
.

#################################################
# Shape 1
#################################################
<hasGeometry-hasSerialization>
    a sh:NodeShape ;
	sh:targetObjectsOf geo:hasGeometry ;
	sh:property <hasGeometry-hasSerialization-sub> ;
.

<hasGeometry-hasSerialization-sub>
	a sh:PropertyShape ;
	sh:path [ 
		sh:alternativePath (
			geo:hasSerialization
			geo:asGML
			geo:asWKT
			geo:asGeoJSON
			geo:asKML
			geo:asDGGS
		) 
	] ;
	sh:minCount 1 ;
	sh:message "Each node with an incoming geo:hasGeometry should have at least one outgoing relation that is either geo:hasSerialization or a specialisation of it."@en ;
	skos:example 
		"""
		# A valid example: incoming into the Geometry Blank Node is geo:hasGeometry, outgoing is geo:asWKT
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			a geo:Feature ;
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			]
		.
		"""^^xsd:string ,
		"""
		# An invalid example: incoming into the Geometry Blank Node is geo:hasGeometry, there is no outgoing subproperty of geo:hasSerialization
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			a geo:Feature ;
			geo:hasGeometry [
				a geo:Geometry ;
			] ;
		.
		"""^^xsd:string ;
.

#################################################
# Shape 2
#################################################
<hasSerialization-hasGeometry>
    a sh:NodeShape ;
	sh:targetSubjectsOf     	
		geo:hasSerialization ,
		geo:asGML ,
		geo:asWKT ,
		geo:asGeoJSON ,
		geo:asKML ,
		geo:asDGGS ;
	sh:property <hasSerialization-hasGeometry-sub> ;
.

<hasSerialization-hasGeometry-sub>
	a sh:PropertyShape ;
	sh:path [ sh:inversePath geo:hasGeometry ] ;
	sh:minCount 1 ;
	sh:maxCount 1 ;
	sh:message "Each node with one or more outgoing relations that are either geo:hasSerialization or a specialisation of it should have exactly one incoming geo:hasGeometry relation."@en ;
	skos:example 
		"""
		# A valid example: outgoing from the Geometry Blank Node is geo:asWKT, incoming is geo:hasGeometry
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			a geo:Feature ;
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: outgoing from the Geometry Blank Node is geo:asGeoJSON, there is no incoming geo:hasGeometry
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x> a geo:Feature .

		[] a geo:Geometry ;
			geo:asGeoJSON "{ \"type\": \"Point\", \"coordinates\": [149.06017784, -35.23612321] }"^^geo:geoJSONLiteral ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: outgoing from the Geometry node is geo:asGeoJSON, there are two incoming geo:hasGeometry
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x> a geo:Feature ;
			geo:hasGeometry <geometry-1> .
		<feature-y> a geo:Feature ;
			geo:hasGeometry <geometry-1> .
		<geometry-1> a geo:Geometry ;
			geo:asGeoJSON "{ \"type\": \"Point\", \"coordinates\": [149.06017784, -35.23612321] }"^^geo:geoJSONLiteral ;
		.
		"""^^xsd:string ;
.

#################################################
# Shape 3
#################################################
<hasGeometry-hasGeometry>
    a sh:NodeShape ;
	sh:targetObjectsOf geo:hasGeometry ;
	sh:property <hasGeometry-hasGeometry-sub> ;
.

<hasGeometry-hasGeometry-sub>
	a sh:PropertyShape ;
	sh:path geo:hasGeometry ;
	sh:maxCount 0 ;
	sh:message "A node that has an outgoing geo:hasGeometry property cannot have an incoming geo:hasGeometry property at the same time (a geo:Feature cannot be a geo:Geometry at the same time)"@en ;
	skos:example 
		"""
		# A valid example: the Resource instance <resource-x> has an outgoing geo:hasGeometry property and no incoming geo:hasGeometry
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-x>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: the Resource instance <resource-x> has both an outgoing and an incoming geo:hasGeometry property (i.e. it's a geo:Feature and a geo:Geometry at the same time)
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<resource-y>
			geo:hasGeometry <resource-x> ;
		.
		<resource-x>
			a geo:Geometry ;
			geo:asWKT "POINT (153.084232 -27.322734)"^^geo:wktLiteral ;
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.		
		"""^^xsd:string ;
.

#################################################
# Shape 4
#################################################
# reasoning needed
# can be automatically derived from ontology if owl:DatatypeProperty is used (not the more generic rdf:Property)

<hasSerialization-literal>
	a sh:NodeShape ;
	sh:targetObjectsOf geo:hasSerialization ;
	sh:nodeKind sh:Literal ;
	sh:message "The target of a geo:hasSerialization property should be an RDF literal."@en ;
	skos:example 
		"""
		# A valid example: the target of a geo:hasSerialization property is an RDF literal
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
				geo:hasSerialization "POINT (153.084230 -27.322738)"^^geo:wktLiteral ; # inferred
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: the target of a geo:hasSerialization property is not an RDF literal
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-y>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT <geometry-serialization-node> ;
				geo:hasSerialization <geometry-serialization-node> ; # inferred
			] ;
		.		
		"""^^xsd:string ;
.

#################################################
# Shape 5-6-7-8-9
#################################################
# can be automatically derived from the ontology if rdfs:range / schema:rangeIncludes is used

<asWKT-wktLiteral>
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asWKT ;
	sh:datatype geo:wktLiteral ;
	sh:message "The target of a geo:asWKT property should be an RDF literal with datatype geo:wktLiteral."@en ;
	skos:example 
		"""
		# A valid example: the target of a geo:asWKT property is an RDF literal with datatype geo:wktLiteral
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: the target of a geo:asWKT property is not an RDF literal
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-y>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT <geometry-serialization-node> ;
			] ;
		.		
		"""^^xsd:string ,
		"""
		# An invalid example: the target of a geo:asWKT property is an RDF literal but with the wrong datatype (xsd:string)
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-z>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)" ;
			] ;
		.		
		"""^^xsd:string ;
.

<asGML-gmlLiteral>
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asGML ;
	sh:datatype geo:gmlLiteral ;
	sh:message "The target of a geo:asGML property should be an RDF literal with datatype geo:gmlLiteral."@en ;
.

<asGeoJSON-geoJSONLiteral>
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asGeoJSON ;
	sh:datatype geo:geoJSONLiteral ;
	sh:message "The target of a geo:asGeoJSON property should be an RDF literal with datatype geo:geoJSONLiteral."@en ;
.

<asKML-kmlLiteral>
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asKML ;
	sh:datatype geo:kmlLiteral ;
	sh:message "The target of a geo:asKML property should be an RDF literal with datatype geo:kmlLiteral."@en ;
.

<asDGGS-dggsLiteral/auspixDggsLiteral>
	a sh:NodeShape ;
	sh:targetObjectsOf geo:asDGGS ;
	sh:or (
		[
			sh:datatype geo:dggsLiteral ;
		]
		[
			sh:datatype geo:auspixDggsLiteral ;
		]
	) ;
	sh:message "The target of a geo:asDGGS property should be an RDF literal with datatype geo:dggsLiteral or auspixDggsLiteral."@en ;
	skos:example
		"""
		# A valid example: the target of a geo:asDGGS property is an RDF literal with datatype geo:dggsLiteral
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		
		<feature-x>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asDGGS "CellList (R3235)"^^geo:dggsLiteral ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# A valid example: the target of a geo:asDGGS property is an RDF literal with datatype geo:auspixDggsLiteral
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		
		<feature-y>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asDGGS "CellList (R3234)"^^geo:auspixDggsLiteral ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: the target of a geo:asDGGS property is not an RDF literal
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		
		<feature-z>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asDGGS <geometry-serialization-node> ;
			] ;
		.		
		"""^^xsd:string ,
		"""
		# An invalid example: the target of a geo:asDGGS property is an RDF literal but with the wrong datatype (xsd:string)
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		
		<feature-w>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asDGGS "CellList (R3236)" ;
			] ;
		.	
		"""^^xsd:string ;
.

#################################################
# Shape 10-11-12-13-14
#################################################
# each metadata property on geo:Geometry can exist only once
# can be automatically derived from ontology if owl:FunctionalProperty is used or OWL restriction on geo:Geometry with owl:cardinality = 1 => this is not the case

<many-coordinateDimension-one>
	a sh:NodeShape ;
	sh:property <many-coordinateDimension-one-sub> ;
	sh:targetSubjectsOf geo:coordinateDimension ;
.
	
<many-coordinateDimension-one-sub>
	a sh:PropertyShape ;
	sh:path geo:coordinateDimension ;
	sh:maxCount 1 ;
	sh:message "The geo:Geometry node with an outgoing geo:coordinateDimension property should have maximum one outgoing geo:coordinateDimension property."@en ;
	skos:example
		"""
		# A valid example: the subject of a geo:coordinateDimension property has no other properties with the same name
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		
		<feature-x>
			geo:hasGeometry [
				geo:coordinateDimension 2 ;
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:dggsLiteral ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: the subject of a geo:coordinateDimension property has also another property with with the same property name but a different value
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .
		
		<feature-y>
			geo:hasGeometry [
				geo:coordinateDimension 2 , 3 ;
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:dggsLiteral ;
			] ;
		.
		"""^^xsd:string ;
.	
	
<many-dimension-one>
	a sh:NodeShape ;
	sh:property <many-dimension-one-sub> ;
	sh:targetSubjectsOf geo:dimension ;
.
	
<many-dimension-one-sub>
	a sh:PropertyShape ;
	sh:path geo:dimension ;
	sh:maxCount 1 ;
	sh:message "The geo:Geometry node with an outgoing geo:dimension property should have maximum one outgoing geo:dimension property."@en ;
.	

<many-isEmpty-one>
	a sh:NodeShape ;
	sh:property <many-isEmpty-one-sub> ;
	sh:targetSubjectsOf geo:isEmpty ;
.
	
<many-isEmpty-one-sub>
	a sh:PropertyShape ;
	sh:path geo:isEmpty ;
	sh:maxCount 1 ;
	sh:message "The geo:Geometry node with an outgoing geo:isEmpty property should have maximum one outgoing geo:isEmpty property."@en ;
.	

<many-isSimple-one>
	a sh:NodeShape ;
	sh:property <many-isSimple-one-sub> ;
	sh:targetSubjectsOf geo:isSimple ;
.
	
<many-isSimple-one-sub>
	a sh:PropertyShape ;
	sh:path geo:isSimple ;
	sh:maxCount 1 ;
	sh:message "The geo:Geometry node with an outgoing geo:isSimple property should have maximum one outgoing geo:isSimple property."@en ;
.	

<many-spatialDimension-one>
	a sh:NodeShape ;
	sh:property <many-spatialDimension-one-sub> ;
	sh:targetSubjectsOf geo:spatialDimension ;
.
	
<many-spatialDimension-one-sub>
	a sh:PropertyShape ;
	sh:path geo:spatialDimension ;
	sh:maxCount 1 ;
	sh:message "The geo:Geometry node with an outgoing geo:spatialDimension property should have maximum one outgoing geo:spatialDimension property."@en ;
.	

#################################################
# Shape 15
#################################################

<one-hasGeometry-many>
  a sh:NodeShape ;
  sh:property <one-hasGeometry-many-sub> ;
  sh:targetObjectsOf geo:hasGeometry ;
.

<one-hasGeometry-many-sub>
	a sh:PropertyShape ;
	sh:path [
	  sh:inversePath geo:hasGeometry ;
	] ;
	sh:maxCount 1 ;	
	sh:message "a node with an incoming geo:hasGeometry property should have maximum one incoming geo:hasGeometry property. In other words, a geo:Geometry node cannot be linked from multiple geo:Feature nodes."@en ;
	skos:example 
		"""
		# A valid example: the Geometry Blank Node has one incoming geo:hasGeometry relation
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x>
			geo:hasGeometry [
				a geo:Geometry ;
				geo:asWKT "POINT (153.084230 -27.322738)"^^geo:wktLiteral ;
			] ;
		.
		"""^^xsd:string ,
		"""
		# An invalid example: the Geometry node has two incoming geo:hasGeometry relations
		@prefix geo: <http://www.opengis.net/ont/geosparql#> .

		<feature-x> a geo:Feature ;
			geo:hasGeometry <geometry-1> .
		<feature-y> a geo:Feature ;
			geo:hasGeometry <geometry-1> .
		<geometry-1> a geo:Geometry ;
			geo:asGeoJSON "{ \"type\": \"Point\", \"coordinates\": [149.06017784, -35.23612321] }"^^geo:geoJSONLiteral ;
		.
		"""^^xsd:string ;
.

#################################################
# Shape 16-17-18-19-20
#################################################
# regex to check if content of WKT/GeoJSON/KML/DGGS/GML literals complies with the basic patterns of such geometries, if possible (check start / end to find e.g. copy/paste errors with GeoSPARQL properties and datatypes, not to check if the content of a literal is fully compliant to the geometry format specification)

#################################################
# Shape 21
#################################################
# each node that is asserted to be of class geo:Feature should have at least one outgoing geo:hasGeometry, i.e. a geo:Feature node should not exist without connected geo:Geometry node
# note: if shapes 32 to 35 b are ratified, this shape will need to be executed after reasoning

#################################################
# Shape 23-24
#################################################
# the previous shapes involving geo:hasGeometry might need to be repeated for geo:hasDefaultGeometry and geo:defaultGeometry, unless reasoning is (and can be) used for those previous shapes
# involves shapes 21, 15, 3, 2, 1

#################################################
# Shape 25-26-27-28-29
#################################################
# a literal with datatype geo:wktLiteral must have an incoming geo:asWKT relation (unsure if this can be defined in SHACL)

#################################################
# Shape 30
#################################################
# if both geo:dimension and geo:coordinateDimension properties are asserted, the value of geo:dimension should be less than or equal to the value of geo:coordinateDimension

#################################################
# Shape 31
#################################################
# geo:hasSerialization should never be asserted since it underspecifies the geometry serialization

#################################################
# Shape a:32 OR b: 32-33-34-35
#################################################
# a) each node that is asserted to be of class geo:Geometry should have at least one outgoing relation that is either geo:hasSerialization or a specialisation of it AND exactly one incoming geo:hasGeometry relation
# OR
# b) classes that can be inferred from relations should not be asserted in datasets to avoid redundant information (geo:Geometry, geo:Feature, geo:SpatialMeasure, geo:SpatialObject) 


